package flatlang/git

import flatlang/io/File
import flatlang/system/ExecutionResponse

class {
  public construct(
    String workingDirectory = System.workingDirectory
  ) {
    this(File(workingDirectory))
  }

  public construct(
    visible File workingDirectory
  ) {}

  public async lsRemote(
    String url,
    Bool: silent = false
  ) => Git.lsRemote(
    url,
    workingDirectory: workingDirectory.location,
    silent
  )

  public static async lsRemote(
    String url,
    String: workingDirectory = System.workingDirectory,
    Bool: silent = false
  ) -> ExecutionResponse {
    let args = [
      "git",
      "ls-remote",
      url
    ]

    return System.execute(args, workingDirectory, silent)
  }

  public async clone(
    String url,
    Int: depth = 0,
    String: outputDirectory = null,
    String: branch = null,
    Bool: silent = false
  ) => Git.clone(
    url,
    depth,
    outputDirectory,
    branch,
    workingDirectory: workingDirectory.location,
    silent
  )

  public static async clone(
    String url,
    Int: depth = 0,
    String: outputDirectory = null,
    String: branch = null,
    String: workingDirectory = System.workingDirectory,
    Bool: silent = false
  ) -> ExecutionResponse {
    let args = [
      "git",
      "clone",
      url
    ]

    if (depth > 0) {
      args.addAll(["--depth", "#depth"])
    }

    if (branch) {
      args.addAll(["--branch", branch])
    }

    if (outputDirectory) {
      args.add(outputDirectory)
    }

    return System.execute(args, workingDirectory, silent)
  }

  public async checkout(
    String ref,
    Bool: createBranch = false,
    Bool: silent = false
  ) => Git.checkout(
    ref,
    workingDirectory: workingDirectory.location,
    createBranch,
    silent
  )

  public static async checkout(
    String ref,
    String: workingDirectory = System.workingDirectory,
    Bool: createBranch = false,
    Bool: silent = false
  ) -> ExecutionResponse {
    let args = [
      "git",
      "checkout"
    ]

    if (createBranch) {
      args.add("-b")
    }

    args.add(ref)

    return System.execute(args, workingDirectory, silent)
  }

  public class PullResponse {
    construct(
      visible Bool: upToDate,
      visible Bool: success,
      visible ExecutionResponse: executionResponse
    ) {}

    override public toString() => "|
      {
        upToDate: #{upToDate},
        success: #{success},
        executionResponse: #{executionResponse}
      }
      |"
  }

  public async pull(
    Bool: silent = false
  ) => Git.pull(
    workingDirectory: workingDirectory.location,
    silent
  )

  public static async pull(
    String: workingDirectory = System.workingDirectory,
    Bool: silent = false
  ) -> PullResponse {
    let args = [
      "git",
      "pull"
    ]

    let executionResponse = System.execute(args, workingDirectory, silent)
    let success = executionResponse.exitCode == 0
    let upToDate = success && executionResponse.stdout.first?.trim() == "Already up to date."

    return PullResponse(
      upToDate,
      success,
      executionResponse
    )
  }

  public class GetConfigValueResponse {
    construct(
      visible String: value,
      visible Bool: success,
      visible ExecutionResponse: executionResponse
    ) {}
  }

  public async getConfigValue(
    String configValue,
    Bool: silent = false
  ) => Git.getConfigValue(
    configValue,
    workingDirectory: workingDirectory.location,
    silent
  )

  public static async getConfigValue(
    String configValue,
    String: workingDirectory = System.workingDirectory,
    Bool: silent = false
  ) -> GetConfigValueResponse => null {
    let response = System.execute(
      ["git", "config", "--get", configValue],
      workingDirectory,
      silent: silent
    )

    if (response.exitCode == 0) {
      return GetConfigValueResponse(
        value: response.stdout.first?.trim(),
        success: response.exitCode == 0,
        executionResponse: response
      )
    } else {
      throw GitCommandException("git config failed", response)
    }
  }

  public class GetOriginUrlResponse extends GetConfigValueResponse {
    construct(GetConfigValueResponse response) {
      this(
        value: response.value,
        success: response.success,
        executionResponse: response.executionResponse
      )
    }

    construct(
      String: value,
      Bool: success,
      ExecutionResponse: executionResponse
    ) {
      super(value, success, executionResponse)
    }
  }

  public async getOriginUrl(
    Bool: silent = false
  ) => Git.getOriginUrl(
    workingDirectory: workingDirectory.location,
    silent
  )

  public static async getOriginUrl(
    String workingDirectory = System.workingDirectory,
    Bool: silent = false
  ) =>
    GetOriginUrlResponse(
      getConfigValue(
        "remote.origin.url",
        workingDirectory: workingDirectory,
        silent
      )
    )
}